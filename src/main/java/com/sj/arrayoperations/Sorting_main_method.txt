    public static void main(String[] args) {
        Sorting srt = new Sorting();

//        int[] input_array = {2, 1, 3, 2, 5};
//        int[] input_array = {5, 2, 1, 5, 9, -3, 7, 2, 1, 56, 23, 45, 65, 890, 12, 42, 78, -7, 78, 89, 965, 456, 23, 23, 45, 100, 432, 675, 278, 878, 524, 784};
        Random rand = new Random();
        int[] input_array = new int[20000];
        for(int i = 0; i < 20000; i++) {
            input_array[i] = rand.nextInt(5000);
        }
//
        srt.bubbleSort(input_array);

        for(int i = 0; i < 20000; i++) {
            input_array[i] = rand.nextInt(5000);
        }
        srt.insertionSort(input_array);
//        String output_array = Arrays.toString(srt.insertionSort(input_array));

//        System.out.println(output_array);
        for(int i = 0; i < 20000; i++) {
            input_array[i] = rand.nextInt(5000);
        }
        srt.mergeSort(input_array);
//        System.out.println(Arrays.toString(input_array));   // as we are using the same memory space to sort,
//                                                            // it will update the original array

//        int[] a = new int[1000000];
        for(int i = 0; i < 20000; i++) {
            input_array[i] = rand.nextInt(5000);
//            a[i] = rand.nextInt(1000);
        }
        srt.callQuickSort(input_array); // unsorted array , O(nlogn) will be the time complexity
        srt.callQuickSort(input_array); // input_array is already sorted, so it is the worst case
                                        // O(n^2) will be time complexity
//        System.out.println(Arrays.toString(input_array));
    }
